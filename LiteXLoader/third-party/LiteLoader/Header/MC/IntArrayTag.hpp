// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Tag.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here
#include "TagMemoryChunk.hpp"

#undef BEFORE_EXTRA

class IntArrayTag : public Tag {

#define AFTER_EXTRA
// Add Member There
    TagMemoryChunk val;

public:
    inline TagMemoryChunk& value()
    {
        return dAccess<TagMemoryChunk, 8>(this);
    }
    inline IntArrayTag& operator=(TagMemoryChunk const& val)
    {
        value() = val;
        return *this;
    }

    inline static IntArrayTag* create()
    {
        IntArrayTag* tag = (IntArrayTag*)Tag::createTag(Tag::Type::IntArray);
        return tag;
    }

    inline static IntArrayTag* create(TagMemoryChunk const& val)
    {
        if (val.size % 4)
            return nullptr;
        IntArrayTag* tag = (IntArrayTag*)Tag::createTag(Tag::Type::IntArray);
        *tag = val;
        return tag;
    }

    inline static IntArrayTag* create(int data[], size_t size)
    {
        if (size % 4)
            return nullptr;
        TagMemoryChunk tmc((char*)data, size*4);
        return create(tmc);
    }

    inline bool set(TagMemoryChunk const& val)
    {
        if (val.size % 4)
            return false;
        if (getTagType() != Tag::Type::IntArray)
            return false;
        value() = val;
        return true;
    }

    inline TagMemoryChunk get()
    {
        return value();
    }

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_INTARRAYTAG
public:
    class IntArrayTag& operator=(class IntArrayTag const&) = delete;
    IntArrayTag(class IntArrayTag const&) = delete;
#endif

public:
    /*0*/ virtual ~IntArrayTag();
    /*1*/ virtual void deleteChildren();
    /*2*/ virtual void write(class IDataOutput&) const;
    /*3*/ virtual void load(class IDataInput&);
    /*4*/ virtual std::string toString() const;
    /*5*/ virtual enum Tag::Type getId() const;
    /*6*/ virtual bool equals(class Tag const&) const;
    /*7*/ virtual std::unique_ptr<class Tag> copy() const;
    /*8*/ virtual unsigned __int64 hash() const;
    MCAPI IntArrayTag();

protected:

private:

};